//
//  LoginVC.swift
//  I'm home
//
//  Created by –î–µ–Ω–∏—Å –í–∏–Ω–æ–∫—É—Ä–æ–≤ on 12.05.2020.
//  Copyright ¬© 2020 –î–µ–Ω–∏—Å –í–∏–Ω–æ–∫—É—Ä–æ–≤. All rights reserved.
//

import UIKit
import SwiftEntryKit
import LocalAuthentication

class LoginVC: UIViewController {
    
    //MARK: IBOutlets
    
    @IBOutlet weak var lockImageButton: CustomButton!
    @IBOutlet var fonImage: UIImageView!
    @IBOutlet var nameTextField: UITextField! {
        didSet {
            setupTextFields(nameTextField)
        }
    }
    @IBOutlet var passwordTextField: UITextField! {
        didSet {
            setupTextFields(passwordTextField)
        }
    }
    
    private let myNotification = CustomNotification()
    private let keychain = Keychain()
    private let nameAccount = "Home"
    private var context = LAContext()
    
    //MARK: –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        if let dict = keychain.getKey(userAccount: nameAccount) {
            lockImageButton.tintColor = .systemGreen
            nameTextField.text = dict["login"] as? String
        } else {
            lockImageButton.tintColor = .lightGray
        }
    }
    
    //MARK: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    //MARK: –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –ª—é–±–æ–µ –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        self.view.endEditing(true)
    }
    
    //MARK: –ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å
    @IBAction func fogotPasswordBtnAction(_ sender: CustomButton) {
    }
    
    //MARK: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    @IBAction func registrationBtnAction(_ sender: CustomButton) {
        performSegue(withIdentifier: "showRegistrationScreen", sender: self)
    }
    
    //MARK: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    @IBAction func autorizeBtnAction(_ sender: CustomButton) {
        var desc = ""
        if passwordTextField.text!.isEmpty {
            desc = "–ö–∞–∂–µ—Ç—Å—è, –∫—Ç–æ-—Ç–æ –∑–∞–±—ã–ª –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è üò±"
        }
        
        if nameTextField.text!.isEmpty {
            desc = "–ö–∞–∂–µ—Ç—Å—è, –∫—Ç–æ-—Ç–æ –∑–∞–±—ã–ª –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üò±"
        }
        
        if nameTextField.text!.isEmpty || passwordTextField.text!.isEmpty {
            myNotification.showNotification(title: "–£–ø—Å", message: desc, imageColor: nil, image: nil)
        } else {
            if keychain.getKey(userAccount: nameAccount)?.isEmpty ?? true {
                keychain.addKey(data: ["login" : nameTextField.text!, "password" : passwordTextField.text!], userAccount: nameAccount)
                self.nameTextField.text = ""
                self.passwordTextField.text = ""
                performSegue(withIdentifier: "autorizeAction", sender: self)
            } else {
                guard let dict = keychain.getKey(userAccount: nameAccount) else {return}
                if nameTextField.text == dict["login"] as? String && passwordTextField.text == dict["password"] as? String {
                    self.nameTextField.text = ""
                    self.passwordTextField.text = ""
                    performSegue(withIdentifier: "autorizeAction", sender: self)
                } else {
                    myNotification.showNotification(title: "–û—à–∏–±–∫–∞", message: "–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å", imageColor: .systemRed, image: "xmark.octagon.fill")
                }
            }
        }
    }
    
    //MARK: –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ –∑–∞–º–∫–∞ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
    @IBAction func lockImageButtonAction(_ sender: CustomButton) {
        if let _ = keychain.getKey(userAccount: nameAccount) {
            showBiomentricAutorization()
        }
    }
    
    /// –í—ã–∑–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Touch –∏–ª–∏ Face ID
    private func showBiomentricAutorization() {
        context = LAContext()
        if context.canEvaluatePolicy(.deviceOwnerAuthentication, error: nil) {
            context.evaluatePolicy(.deviceOwnerAuthentication, localizedReason: "–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è") { (success, error) in
                if success {
                    DispatchQueue.main.async {
                        if let dict = self.keychain.getKey(userAccount: self.nameAccount) {
                            self.lockImageButton.tintColor = .systemGreen
                            self.nameTextField.text = dict["login"] as? String
                            self.passwordTextField.text = dict["password"] as? String
                            self.context.invalidate()
                            self.nameTextField.text = ""
                            self.passwordTextField.text = ""
                            self.performSegue(withIdentifier: "autorizeAction", sender: self)
                        }
                    }
                } else {
                    print("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±–∏–æ–º–µ—Ç—Ä–∏—é")
                }
            }
        }
    }
    
    //MARK: –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    //MARK: –°—Ç–∏–ª—å —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞
    override var preferredStatusBarStyle: UIStatusBarStyle{
        return .lightContent
    }
    
    //MARK: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
    fileprivate func setupTextFields(_ textField: UITextField) {
        //Basic texfield Setup
        textField.borderStyle = .none
        textField.backgroundColor = .white
        //To apply corner radius
        textField.layer.cornerRadius = textField.frame.size.height / 2
        //To apply border
        textField.layer.borderWidth = 0.25
        //To apply Shadow
        textField.layer.shadowOpacity = 0.2
        textField.layer.shadowRadius = 5.0
        //To apply padding
        let paddingView : UIView = UIView(frame: CGRect(x: 0, y: 0, width: 20, height: textField.frame.height))
        textField.leftView = paddingView
        textField.leftViewMode = UITextField.ViewMode.always
        textField.layer.borderColor = UIColor.black.withAlphaComponent(0.25).cgColor
        textField.layer.shadowOffset = CGSize(width: 0, height: 4)
        textField.layer.shadowColor = UIColor.black.cgColor //Any dark color
        let spacerView = UIView(frame:CGRect(x:0, y:0, width:40, height:10))
        textField.leftViewMode = UITextField.ViewMode.always
        textField.leftView = spacerView
        textField.overrideUserInterfaceStyle = .light
    }
}
