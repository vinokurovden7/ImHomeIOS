//
//  LoginVC.swift
//  I'm home
//
//  Created by –î–µ–Ω–∏—Å –í–∏–Ω–æ–∫—É—Ä–æ–≤ on 12.05.2020.
//  Copyright ¬© 2020 –î–µ–Ω–∏—Å –í–∏–Ω–æ–∫—É—Ä–æ–≤. All rights reserved.
//

import UIKit
import SwiftEntryKit
import RealmSwift

class LoginVC: UIViewController {
    
    //MARK: IBOutlets
    @IBOutlet var fonImage: UIImageView!
    @IBOutlet var nameTextField: UITextField! {
        didSet {
            setupTextFields(nameTextField)
        }
    }
    @IBOutlet var passwordTextField: UITextField! {
        didSet {
            setupTextFields(passwordTextField)
        }
    }
    
    //MARK: –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    //MARK: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    //MARK: –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –ª—é–±–æ–µ –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        self.view.endEditing(true)
    }
    
    //MARK: –ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å
    @IBAction func fogotPasswordBtnAction(_ sender: CustomButton) {
    }
    
    //MARK: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    @IBAction func registrationBtnAction(_ sender: CustomButton) {
        performSegue(withIdentifier: "showRegistrationScreen", sender: self)
    }
    
    //MARK: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    @IBAction func autorizeBtnAction(_ sender: CustomButton) {
        var desc = ""
        if passwordTextField.text!.isEmpty {
            desc = "–ö–∞–∂–µ—Ç—Å—è, –∫—Ç–æ-—Ç–æ –∑–∞–±—ã–ª –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è üò±"
        }
        
        if nameTextField.text!.isEmpty {
            desc = "–ö–∞–∂–µ—Ç—Å—è, –∫—Ç–æ-—Ç–æ –∑–∞–±—ã–ª –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üò±"
        }
        
        if nameTextField.text!.isEmpty || passwordTextField.text!.isEmpty {
            let contentView = CustomNotification.sharedCustomNotification.getFloatContentView(title: "–£–ø—Å", desc: desc, textColor: EKColor(UIColor(named: "notifTextViewColor")!), imageColor: EKColor(UIColor.systemOrange), imageName: "exclamationmark.triangle.fill")
            let attributes = CustomNotification.sharedCustomNotification.floatAlertAttributes
            SwiftEntryKit.display(entry: contentView, using: attributes)
            UINotificationFeedbackGenerator().notificationOccurred(.error)
        } else {
            self.nameTextField.text = ""
            self.passwordTextField.text = ""
            performSegue(withIdentifier: "autorizeAction", sender: self)
        }
    }
    
    //MARK: –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    //MARK: –°—Ç–∏–ª—å —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞
    override var preferredStatusBarStyle: UIStatusBarStyle{
        return .lightContent
    }
    
    //MARK: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
    fileprivate func setupTextFields(_ textField: UITextField) {
        //Basic texfield Setup
        textField.borderStyle = .none
        textField.backgroundColor = .white
        //To apply corner radius
        textField.layer.cornerRadius = textField.frame.size.height / 2
        //To apply border
        textField.layer.borderWidth = 0.25
        //To apply Shadow
        textField.layer.shadowOpacity = 0.2
        textField.layer.shadowRadius = 5.0
        //To apply padding
        let paddingView : UIView = UIView(frame: CGRect(x: 0, y: 0, width: 20, height: textField.frame.height))
        textField.leftView = paddingView
        textField.leftViewMode = UITextField.ViewMode.always
        textField.layer.borderColor = UIColor.black.withAlphaComponent(0.25).cgColor
        textField.layer.shadowOffset = CGSize(width: 0, height: 4)
        textField.layer.shadowColor = UIColor.black.cgColor //Any dark color
        let spacerView = UIView(frame:CGRect(x:0, y:0, width:40, height:10))
        textField.leftViewMode = UITextField.ViewMode.always
        textField.leftView = spacerView
        textField.overrideUserInterfaceStyle = .light
    }
}
